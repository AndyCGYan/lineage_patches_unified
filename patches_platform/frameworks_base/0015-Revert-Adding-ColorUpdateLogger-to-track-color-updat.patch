From 533b667c2588eb8b241da7ccbb1955190cbda4c7 Mon Sep 17 00:00:00 2001
From: Andy CrossGate Yan <GeForce8800Ultra@gmail.com>
Date: Sun, 30 Jun 2024 15:53:25 +0800
Subject: [PATCH 15/43] Revert "Adding ColorUpdateLogger to track color updates
 so that we demonstrate the root cause of our theme bugs"

This reverts commit 3a819dee1225de25f0e228ef2c1b9447eb081661.

Change-Id: I7f58b1fa44339d3cf76d5254c7b3aceb66e07c10
---
 packages/SystemUI/aconfig/systemui.aconfig    |   7 -
 .../systemui/statusbar/NotificationShelf.java |  17 +-
 .../notification/ColorUpdateLogger.kt         | 153 -------------
 .../coordinator/ViewConfigCoordinator.kt      |  14 +-
 .../footer/ui/view/FooterView.java            |  23 +-
 .../row/ActivatableNotificationView.java      |   6 +-
 .../row/ExpandableNotificationRow.java        |  21 +-
 .../ExpandableNotificationRowController.java  |   5 -
 .../notification/row/ExpandableView.java      |   6 +-
 .../row/NotificationBackgroundView.java       |  13 +-
 .../stack/NotificationStackScrollLayout.java  |  13 +-
 ...tificationStackScrollLayoutController.java |  10 -
 .../phone/ConfigurationControllerImpl.kt      |   9 -
 .../policy/ConfigurationController.java       |   3 -
 .../com/android/systemui/util/DrawableDump.kt | 201 ------------------
 .../coordinator/ViewConfigCoordinatorTest.kt  |   6 +-
 ...ExpandableNotificationRowControllerTest.kt |   3 -
 .../row/NotificationTestHelper.java           |   2 -
 ...cationStackScrollLayoutControllerTest.java |   3 -
 .../policy/FakeConfigurationController.kt     |   1 -
 .../leaks/FakeConfigurationController.java    |   5 -
 21 files changed, 15 insertions(+), 506 deletions(-)
 delete mode 100644 packages/SystemUI/src/com/android/systemui/statusbar/notification/ColorUpdateLogger.kt
 delete mode 100644 packages/SystemUI/src/com/android/systemui/util/DrawableDump.kt

diff --git a/packages/SystemUI/aconfig/systemui.aconfig b/packages/SystemUI/aconfig/systemui.aconfig
index d3cd1761a919..325e0d4133aa 100644
--- a/packages/SystemUI/aconfig/systemui.aconfig
+++ b/packages/SystemUI/aconfig/systemui.aconfig
@@ -38,13 +38,6 @@ flag {
     bug: "217799515"
 }
 
-flag {
-    name: "notification_color_update_logger"
-    namespace: "systemui"
-    description: "Enabled debug logging and dumping of notification color updates."
-    bug: "294347738"
-}
-
 flag {
     name: "notifications_footer_view_refactor"
     namespace: "systemui"
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/NotificationShelf.java b/packages/SystemUI/src/com/android/systemui/statusbar/NotificationShelf.java
index 615534809c97..0e0f15237185 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/NotificationShelf.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/NotificationShelf.java
@@ -17,7 +17,6 @@
 package com.android.systemui.statusbar;
 
 import static com.android.keyguard.BouncerPanelExpansionCalculator.aboutToShowBouncerProgress;
-import static com.android.systemui.util.ColorUtilKt.hexColorString;
 
 import android.content.Context;
 import android.content.res.Configuration;
@@ -43,7 +42,6 @@ import com.android.systemui.flags.Flags;
 import com.android.systemui.flags.RefactorFlag;
 import com.android.systemui.res.R;
 import com.android.systemui.shade.transition.LargeScreenShadeInterpolator;
-import com.android.systemui.statusbar.notification.ColorUpdateLogger;
 import com.android.systemui.statusbar.notification.NotificationUtils;
 import com.android.systemui.statusbar.notification.SourceType;
 import com.android.systemui.statusbar.notification.row.ActivatableNotificationView;
@@ -189,8 +187,8 @@ public class NotificationShelf extends ActivatableNotificationView {
 
     @Override
     public String toString() {
-        return super.toString()
-                + " (hideBackground=" + mHideBackground
+        return "NotificationShelf"
+                + "(hideBackground=" + mHideBackground
                 + " notGoneIndex=" + mNotGoneIndex
                 + " hasItemsInStableShelf=" + mHasItemsInStableShelf
                 + " interactive=" + mInteractive
@@ -370,17 +368,6 @@ public class NotificationShelf extends ActivatableNotificationView {
                 && isYInView(localY, slop, top, bottom);
     }
 
-    @Override
-    public void updateBackgroundColors() {
-        super.updateBackgroundColors();
-        ColorUpdateLogger colorUpdateLogger = ColorUpdateLogger.getInstance();
-        if (colorUpdateLogger != null) {
-            colorUpdateLogger.logEvent("Shelf.updateBackgroundColors()",
-                    "normalBgColor=" + hexColorString(getNormalBgColor())
-                            + " background=" + mBackgroundNormal.toDumpString());
-        }
-    }
-
     /**
      * Update the shelf appearance based on the other notifications around it. This transforms
      * the icons from the notification area into the shelf.
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/notification/ColorUpdateLogger.kt b/packages/SystemUI/src/com/android/systemui/statusbar/notification/ColorUpdateLogger.kt
deleted file mode 100644
index 0f0ab2e36b8d..000000000000
--- a/packages/SystemUI/src/com/android/systemui/statusbar/notification/ColorUpdateLogger.kt
+++ /dev/null
@@ -1,153 +0,0 @@
-/*
- * Copyright (C) 2023 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License
- */
-
-package com.android.systemui.statusbar.notification
-
-import android.icu.text.SimpleDateFormat
-import android.util.IndentingPrintWriter
-import com.android.systemui.Dumpable
-import com.android.systemui.Flags.notificationColorUpdateLogger
-import com.android.systemui.dagger.SysUISingleton
-import com.android.systemui.dump.DumpManager
-import com.android.systemui.flags.FeatureFlagsClassic
-import com.android.systemui.util.Compile
-import com.android.systemui.util.asIndenting
-import com.android.systemui.util.printCollection
-import com.android.systemui.util.withIncreasedIndent
-import com.google.errorprone.annotations.CompileTimeConstant
-import java.io.PrintWriter
-import java.util.Locale
-import java.util.SortedSet
-import java.util.TreeSet
-import javax.inject.Inject
-
-@SysUISingleton
-class ColorUpdateLogger
-@Inject
-constructor(
-    val featureFlags: FeatureFlagsClassic,
-    dumpManager: DumpManager,
-) : Dumpable {
-
-    inline val isEnabled
-        get() = Compile.IS_DEBUG && notificationColorUpdateLogger()
-    private val frames: MutableList<Frame> = mutableListOf()
-
-    init {
-        dumpManager.registerDumpable(this)
-        if (isEnabled) {
-            instance = this
-        }
-    }
-
-    @JvmOverloads
-    fun logTriggerEvent(@CompileTimeConstant type: String, extra: String? = null) {
-        if (!isEnabled) return
-        val event = Event(type = type, extraValue = extra)
-        val didAppend = frames.lastOrNull()?.tryAddTrigger(event) == true
-        if (!didAppend) {
-            frames.add(Frame(event))
-            if (frames.size > maxFrames) frames.removeAt(0)
-        }
-    }
-
-    @JvmOverloads
-    fun logEvent(@CompileTimeConstant type: String, extra: String? = null) {
-        if (!isEnabled) return
-        val frame = frames.lastOrNull() ?: return
-        frame.events.add(Event(type = type, extraValue = extra))
-        frame.trim()
-    }
-
-    @JvmOverloads
-    fun logNotificationEvent(
-        @CompileTimeConstant type: String,
-        key: String,
-        extra: String? = null
-    ) {
-        if (!isEnabled) return
-        val frame = frames.lastOrNull() ?: return
-        frame.events.add(Event(type = type, extraValue = extra, notificationKey = key))
-        frame.trim()
-    }
-
-    override fun dump(pwOrig: PrintWriter, args: Array<out String>) {
-        val pw = pwOrig.asIndenting()
-        pw.println("enabled: $isEnabled")
-        pw.printCollection("frames", frames) { it.dump(pw) }
-    }
-
-    private class Frame(event: Event) {
-        val startTime: Long = event.time
-        val events: MutableList<Event> = mutableListOf(event)
-        val triggers: SortedSet<String> = TreeSet<String>().apply { add(event.type) }
-        var trimmedEvents: Int = 0
-
-        fun tryAddTrigger(newEvent: Event): Boolean {
-            if (newEvent.time < startTime) return false
-            if (newEvent.time - startTime > triggerStartsNewFrameAge) return false
-            if (newEvent.type in triggers) return false
-            triggers.add(newEvent.type)
-            events.add(newEvent)
-            trim()
-            return true
-        }
-
-        fun trim() {
-            if (events.size > maxEventsPerFrame) {
-                events.removeAt(0)
-                trimmedEvents++
-            }
-        }
-
-        fun dump(pw: IndentingPrintWriter) {
-            pw.println("Frame")
-            pw.withIncreasedIndent {
-                pw.println("startTime: ${timeString(startTime)}")
-                pw.printCollection("triggers", triggers)
-                pw.println("trimmedEvents: $trimmedEvents")
-                pw.printCollection("events", events) { it.dump(pw) }
-            }
-        }
-    }
-
-    private class Event(
-        @CompileTimeConstant val type: String,
-        val extraValue: String? = null,
-        val notificationKey: String? = null,
-    ) {
-        val time: Long = System.currentTimeMillis()
-
-        fun dump(pw: IndentingPrintWriter) {
-            pw.append(timeString(time)).append(": ").append(type)
-            extraValue?.let { pw.append(" ").append(it) }
-            notificationKey?.let { pw.append(" ---- ").append(logKey(it)) }
-            pw.println()
-        }
-    }
-
-    private companion object {
-        @JvmStatic
-        var instance: ColorUpdateLogger? = null
-            private set
-        private const val maxFrames = 5
-        private const val maxEventsPerFrame = 250
-        private const val triggerStartsNewFrameAge = 5000
-
-        private val dateFormat = SimpleDateFormat("MM-dd HH:mm:ss.SSS", Locale.US)
-        private fun timeString(time: Long): String = dateFormat.format(time)
-    }
-}
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/notification/collection/coordinator/ViewConfigCoordinator.kt b/packages/SystemUI/src/com/android/systemui/statusbar/notification/collection/coordinator/ViewConfigCoordinator.kt
index b8a959440312..3809ea0f58da 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/notification/collection/coordinator/ViewConfigCoordinator.kt
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/notification/collection/coordinator/ViewConfigCoordinator.kt
@@ -23,7 +23,6 @@ import com.android.keyguard.KeyguardUpdateMonitor
 import com.android.keyguard.KeyguardUpdateMonitorCallback
 import com.android.systemui.statusbar.NotificationLockscreenUserManager
 import com.android.systemui.statusbar.NotificationLockscreenUserManager.UserChangedListener
-import com.android.systemui.statusbar.notification.ColorUpdateLogger
 import com.android.systemui.statusbar.notification.collection.NotifPipeline
 import com.android.systemui.statusbar.notification.collection.coordinator.dagger.CoordinatorScope
 import com.android.systemui.statusbar.notification.row.NotificationGutsManager
@@ -42,8 +41,7 @@ class ViewConfigCoordinator @Inject internal constructor(
     private val mConfigurationController: ConfigurationController,
     private val mLockscreenUserManager: NotificationLockscreenUserManager,
     private val mGutsManager: NotificationGutsManager,
-    private val mKeyguardUpdateMonitor: KeyguardUpdateMonitor,
-    private val colorUpdateLogger: ColorUpdateLogger,
+    private val mKeyguardUpdateMonitor: KeyguardUpdateMonitor
 ) : Coordinator, ConfigurationController.ConfigurationListener {
 
     private var mIsSwitchingUser = false
@@ -53,13 +51,11 @@ class ViewConfigCoordinator @Inject internal constructor(
 
     private val mKeyguardUpdateCallback = object : KeyguardUpdateMonitorCallback() {
         override fun onUserSwitching(userId: Int) {
-            colorUpdateLogger.logTriggerEvent("VCC.mKeyguardUpdateCallback.onUserSwitching()")
             log { "ViewConfigCoordinator.onUserSwitching(userId=$userId)" }
             mIsSwitchingUser = true
         }
 
         override fun onUserSwitchComplete(userId: Int) {
-            colorUpdateLogger.logTriggerEvent("VCC.mKeyguardUpdateCallback.onUserSwitchComplete()")
             log { "ViewConfigCoordinator.onUserSwitchComplete(userId=$userId)" }
             mIsSwitchingUser = false
             applyChangesOnUserSwitched()
@@ -68,7 +64,6 @@ class ViewConfigCoordinator @Inject internal constructor(
 
     private val mUserChangedListener = object : UserChangedListener {
         override fun onUserChanged(userId: Int) {
-            colorUpdateLogger.logTriggerEvent("VCC.mUserChangedListener.onUserChanged()")
             log { "ViewConfigCoordinator.onUserChanged(userId=$userId)" }
             applyChangesOnUserSwitched()
         }
@@ -82,7 +77,6 @@ class ViewConfigCoordinator @Inject internal constructor(
     }
 
     override fun onDensityOrFontScaleChanged() {
-        colorUpdateLogger.logTriggerEvent("VCC.onDensityOrFontScaleChanged()")
         log {
             val keyguardIsSwitchingUser = mKeyguardUpdateMonitor.isSwitchingUser
             "ViewConfigCoordinator.onDensityOrFontScaleChanged()" +
@@ -99,7 +93,6 @@ class ViewConfigCoordinator @Inject internal constructor(
     }
 
     override fun onUiModeChanged() {
-        colorUpdateLogger.logTriggerEvent("VCC.onUiModeChanged()")
         log {
             val keyguardIsSwitchingUser = mKeyguardUpdateMonitor.isSwitchingUser
             "ViewConfigCoordinator.onUiModeChanged()" +
@@ -114,12 +107,10 @@ class ViewConfigCoordinator @Inject internal constructor(
     }
 
     override fun onThemeChanged() {
-        colorUpdateLogger.logTriggerEvent("VCC.onThemeChanged()")
         onDensityOrFontScaleChanged()
     }
 
     private fun applyChangesOnUserSwitched() {
-        colorUpdateLogger.logEvent("VCC.applyChangesOnUserSwitched()")
         if (mReinflateNotificationsOnUserSwitched) {
             updateNotificationsOnDensityOrFontScaleChanged()
             mReinflateNotificationsOnUserSwitched = false
@@ -131,8 +122,6 @@ class ViewConfigCoordinator @Inject internal constructor(
     }
 
     private fun updateNotificationsOnUiModeChanged() {
-        colorUpdateLogger.logEvent("VCC.updateNotificationsOnUiModeChanged()",
-                "mode=" + mConfigurationController.nightModeName)
         log { "ViewConfigCoordinator.updateNotificationsOnUiModeChanged()" }
         traceSection("updateNotifOnUiModeChanged") {
             mPipeline?.allNotifs?.forEach { entry ->
@@ -142,7 +131,6 @@ class ViewConfigCoordinator @Inject internal constructor(
     }
 
     private fun updateNotificationsOnDensityOrFontScaleChanged() {
-        colorUpdateLogger.logEvent("VCC.updateNotificationsOnDensityOrFontScaleChanged()")
         mPipeline?.allNotifs?.forEach { entry ->
             entry.onDensityOrFontScaleChanged()
             val exposedGuts = entry.areGutsExposed()
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/notification/footer/ui/view/FooterView.java b/packages/SystemUI/src/com/android/systemui/statusbar/notification/footer/ui/view/FooterView.java
index f792898520a2..16f18a3c3fb6 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/notification/footer/ui/view/FooterView.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/notification/footer/ui/view/FooterView.java
@@ -19,7 +19,6 @@ package com.android.systemui.statusbar.notification.footer.ui.view;
 import static android.graphics.PorterDuff.Mode.SRC_ATOP;
 
 import static com.android.systemui.Flags.notificationBackgroundTintOptimization;
-import static com.android.systemui.util.ColorUtilKt.hexColorString;
 
 import android.annotation.ColorInt;
 import android.annotation.DrawableRes;
@@ -41,13 +40,11 @@ import androidx.annotation.NonNull;
 
 import com.android.settingslib.Utils;
 import com.android.systemui.res.R;
-import com.android.systemui.statusbar.notification.ColorUpdateLogger;
 import com.android.systemui.statusbar.notification.footer.shared.FooterViewRefactor;
 import com.android.systemui.statusbar.notification.row.FooterViewButton;
 import com.android.systemui.statusbar.notification.row.StackScrollerDecorView;
 import com.android.systemui.statusbar.notification.stack.ExpandableViewState;
 import com.android.systemui.statusbar.notification.stack.ViewState;
-import com.android.systemui.util.DrawableDumpKt;
 import com.android.systemui.util.DumpUtilsKt;
 
 import java.io.PrintWriter;
@@ -242,10 +239,6 @@ public class FooterView extends StackScrollerDecorView {
 
     @Override
     protected void onFinishInflate() {
-        ColorUpdateLogger colorUpdateLogger = ColorUpdateLogger.getInstance();
-        if (colorUpdateLogger != null) {
-            colorUpdateLogger.logTriggerEvent("Footer.onFinishInflate()");
-        }
         super.onFinishInflate();
         mClearAllButton = (FooterViewButton) findSecondaryView();
         mManageOrHistoryButton = findViewById(R.id.manage_text);
@@ -355,10 +348,6 @@ public class FooterView extends StackScrollerDecorView {
 
     @Override
     protected void onConfigurationChanged(Configuration newConfig) {
-        ColorUpdateLogger colorUpdateLogger = ColorUpdateLogger.getInstance();
-        if (colorUpdateLogger != null) {
-            colorUpdateLogger.logTriggerEvent("Footer.onConfigurationChanged()");
-        }
         super.onConfigurationChanged(newConfig);
         updateColors();
         if (!FooterViewRefactor.isEnabled()) {
@@ -376,17 +365,14 @@ public class FooterView extends StackScrollerDecorView {
                 com.android.internal.R.attr.materialColorOnSurface);
         final Drawable clearAllBg = theme.getDrawable(R.drawable.notif_footer_btn_background);
         final Drawable manageBg = theme.getDrawable(R.drawable.notif_footer_btn_background);
-        final @ColorInt int scHigh;
         if (!notificationBackgroundTintOptimization()) {
-            scHigh = Utils.getColorAttrDefaultColor(mContext,
+            final @ColorInt int scHigh = Utils.getColorAttrDefaultColor(mContext,
                     com.android.internal.R.attr.materialColorSurfaceContainerHigh);
             if (scHigh != 0) {
                 final ColorFilter bgColorFilter = new PorterDuffColorFilter(scHigh, SRC_ATOP);
                 clearAllBg.setColorFilter(bgColorFilter);
                 manageBg.setColorFilter(bgColorFilter);
             }
-        } else {
-            scHigh = 0;
         }
         mClearAllButton.setBackground(clearAllBg);
         mClearAllButton.setTextColor(onSurface);
@@ -394,13 +380,6 @@ public class FooterView extends StackScrollerDecorView {
         mManageOrHistoryButton.setTextColor(onSurface);
         mSeenNotifsFooterTextView.setTextColor(onSurface);
         mSeenNotifsFooterTextView.setCompoundDrawableTintList(ColorStateList.valueOf(onSurface));
-        ColorUpdateLogger colorUpdateLogger = ColorUpdateLogger.getInstance();
-        if (colorUpdateLogger != null) {
-            colorUpdateLogger.logEvent("Footer.updateColors()",
-                    "textColor(onSurface)=" + hexColorString(onSurface)
-                            + " backgroundTint(surfaceContainerHigh)=" + hexColorString(scHigh)
-                            + " background=" + DrawableDumpKt.dumpToString(manageBg));
-        }
     }
 
     private void updateResources() {
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/notification/row/ActivatableNotificationView.java b/packages/SystemUI/src/com/android/systemui/statusbar/notification/row/ActivatableNotificationView.java
index 61cdea190a43..83c50f52af6f 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/notification/row/ActivatableNotificationView.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/notification/row/ActivatableNotificationView.java
@@ -88,7 +88,7 @@ public abstract class ActivatableNotificationView extends ExpandableOutlineView
     private boolean mActivated;
 
     private Interpolator mCurrentAppearInterpolator;
-    protected NotificationBackgroundView mBackgroundNormal;
+    NotificationBackgroundView mBackgroundNormal;
     private float mAnimationTranslationY;
     private boolean mDrawingAppearAnimation;
     private ValueAnimator mAppearAnimator;
@@ -142,10 +142,6 @@ public abstract class ActivatableNotificationView extends ExpandableOutlineView
         updateBackgroundTint();
     }
 
-    protected int getNormalBgColor() {
-        return mNormalColor;
-    }
-
     /**
      * @param width The actual width to apply to the background view.
      */
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/notification/row/ExpandableNotificationRow.java b/packages/SystemUI/src/com/android/systemui/statusbar/notification/row/ExpandableNotificationRow.java
index 1bb5a771a543..e564a15f462f 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/notification/row/ExpandableNotificationRow.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/notification/row/ExpandableNotificationRow.java
@@ -21,7 +21,6 @@ import static android.service.notification.NotificationListenerService.REASON_CA
 
 import static com.android.systemui.statusbar.notification.collection.NotificationEntry.DismissState.PARENT_DISMISSED;
 import static com.android.systemui.statusbar.notification.row.NotificationContentView.VISIBLE_TYPE_HEADSUP;
-import static com.android.systemui.util.ColorUtilKt.hexColorString;
 
 import android.animation.Animator;
 import android.animation.AnimatorListenerAdapter;
@@ -86,7 +85,6 @@ import com.android.systemui.statusbar.RemoteInputController;
 import com.android.systemui.statusbar.SmartReplyController;
 import com.android.systemui.statusbar.StatusBarIconView;
 import com.android.systemui.statusbar.notification.AboveShelfChangedListener;
-import com.android.systemui.statusbar.notification.ColorUpdateLogger;
 import com.android.systemui.statusbar.notification.FeedbackIcon;
 import com.android.systemui.statusbar.notification.LaunchAnimationParameters;
 import com.android.systemui.statusbar.notification.NotificationFadeAware;
@@ -176,7 +174,6 @@ public class ExpandableNotificationRow extends ActivatableNotificationView
     private Optional<BubblesManager> mBubblesManagerOptional;
     private MetricsLogger mMetricsLogger;
     private NotificationChildrenContainerLogger mChildrenContainerLogger;
-    private ColorUpdateLogger mColorUpdateLogger;
     private NotificationDismissibilityProvider mDismissibilityProvider;
     private FeatureFlags mFeatureFlags;
     private int mIconTransformContentShift;
@@ -451,7 +448,6 @@ public class ExpandableNotificationRow extends ActivatableNotificationView
 
     /**
      * Sets animations running in the layouts of this row, including public, private, and children.
-     *
      * @param running whether the animations should be started running or stopped.
      */
     public void setAnimationRunning(boolean running) {
@@ -621,12 +617,6 @@ public class ExpandableNotificationRow extends ActivatableNotificationView
 
     private void updateBackgroundColorsOfSelf() {
         super.updateBackgroundColors();
-        if (mColorUpdateLogger.isEnabled()) {
-            mColorUpdateLogger.logNotificationEvent("ENR.updateBackgroundColorsOfSelf()",
-                    mLoggingKey,
-                    "normalBgColor=" + hexColorString(getNormalBgColor())
-                            + " background=" + mBackgroundNormal.toDumpString());
-        }
     }
 
     @Override
@@ -1408,7 +1398,7 @@ public class ExpandableNotificationRow extends ActivatableNotificationView
     }
 
     public void setContentBackground(int customBackgroundColor, boolean animate,
-            NotificationContentView notificationContentView) {
+                                     NotificationContentView notificationContentView) {
         if (getShowingLayout() == notificationContentView) {
             setTintColor(customBackgroundColor, animate);
         }
@@ -1477,7 +1467,7 @@ public class ExpandableNotificationRow extends ActivatableNotificationView
     }
 
     /**
-     * @return if this entry should be kept in its parent during removal.
+     * @return  if this entry should be kept in its parent during removal.
      */
     public boolean keepInParentForDismissAnimation() {
         return mKeepInParentForDismissAnimation;
@@ -1824,7 +1814,6 @@ public class ExpandableNotificationRow extends ActivatableNotificationView
             NotificationDismissibilityProvider dismissibilityProvider,
             MetricsLogger metricsLogger,
             NotificationChildrenContainerLogger childrenContainerLogger,
-            ColorUpdateLogger colorUpdateLogger,
             SmartReplyConstants smartReplyConstants,
             SmartReplyController smartReplyController,
             FeatureFlags featureFlags,
@@ -1863,7 +1852,6 @@ public class ExpandableNotificationRow extends ActivatableNotificationView
         mNotificationGutsManager = gutsManager;
         mMetricsLogger = metricsLogger;
         mChildrenContainerLogger = childrenContainerLogger;
-        mColorUpdateLogger = colorUpdateLogger;
         mDismissibilityProvider = dismissibilityProvider;
         mFeatureFlags = featureFlags;
     }
@@ -2322,7 +2310,7 @@ public class ExpandableNotificationRow extends ActivatableNotificationView
     }
 
     public Animator getTranslateViewAnimator(final float leftTarget,
-            AnimatorUpdateListener listener) {
+                                             AnimatorUpdateListener listener) {
         if (mTranslateAnim != null) {
             mTranslateAnim.cancel();
         }
@@ -2721,7 +2709,6 @@ public class ExpandableNotificationRow extends ActivatableNotificationView
             return getCollapsedHeight();
         }
     }
-
     /**
      * @return {@code true} if the notification can show it's heads up layout. This is mostly true
      * except for legacy use cases.
@@ -2906,7 +2893,7 @@ public class ExpandableNotificationRow extends ActivatableNotificationView
 
     @Override
     public void setHideSensitive(boolean hideSensitive, boolean animated, long delay,
-            long duration) {
+                                 long duration) {
         if (getVisibility() == GONE) {
             // If we are GONE, the hideSensitive parameter will not be calculated and always be
             // false, which is incorrect, let's wait until a real call comes in later.
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/notification/row/ExpandableNotificationRowController.java b/packages/SystemUI/src/com/android/systemui/statusbar/notification/row/ExpandableNotificationRowController.java
index e59829bf3c99..5614f3a3fcc5 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/notification/row/ExpandableNotificationRowController.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/notification/row/ExpandableNotificationRowController.java
@@ -41,7 +41,6 @@ import com.android.systemui.plugins.PluginManager;
 import com.android.systemui.plugins.statusbar.NotificationMenuRowPlugin;
 import com.android.systemui.plugins.statusbar.StatusBarStateController;
 import com.android.systemui.statusbar.SmartReplyController;
-import com.android.systemui.statusbar.notification.ColorUpdateLogger;
 import com.android.systemui.statusbar.notification.FeedbackIcon;
 import com.android.systemui.statusbar.notification.collection.NotificationEntry;
 import com.android.systemui.statusbar.notification.collection.provider.NotificationDismissibilityProvider;
@@ -87,7 +86,6 @@ public class ExpandableNotificationRowController implements NotifViewController
     private final SystemClock mClock;
     private final String mAppName;
     private final String mNotificationKey;
-    private final ColorUpdateLogger mColorUpdateLogger;
     private final KeyguardBypassController mKeyguardBypassController;
     private final GroupMembershipManager mGroupMembershipManager;
     private final GroupExpansionManager mGroupExpansionManager;
@@ -202,7 +200,6 @@ public class ExpandableNotificationRowController implements NotifViewController
             ActivatableNotificationViewController activatableNotificationViewController,
             RemoteInputViewSubcomponent.Factory rivSubcomponentFactory,
             MetricsLogger metricsLogger,
-            ColorUpdateLogger colorUpdateLogger,
             NotificationRowLogger logBufferLogger,
             NotificationChildrenContainerLogger childrenContainerLogger,
             NotificationListContainer listContainer,
@@ -259,7 +256,6 @@ public class ExpandableNotificationRowController implements NotifViewController
         mDragController = dragController;
         mMetricsLogger = metricsLogger;
         mChildrenContainerLogger = childrenContainerLogger;
-        mColorUpdateLogger = colorUpdateLogger;
         mLogBufferLogger = logBufferLogger;
         mSmartReplyConstants = smartReplyConstants;
         mSmartReplyController = smartReplyController;
@@ -294,7 +290,6 @@ public class ExpandableNotificationRowController implements NotifViewController
                 mDismissibilityProvider,
                 mMetricsLogger,
                 mChildrenContainerLogger,
-                mColorUpdateLogger,
                 mSmartReplyConstants,
                 mSmartReplyController,
                 mFeatureFlags,
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/notification/row/ExpandableView.java b/packages/SystemUI/src/com/android/systemui/statusbar/notification/row/ExpandableView.java
index ea9df9af8cff..ec8e5d730c36 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/notification/row/ExpandableView.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/notification/row/ExpandableView.java
@@ -16,8 +16,6 @@
 
 package com.android.systemui.statusbar.notification.row;
 
-import static com.android.systemui.Flags.notificationColorUpdateLogger;
-
 import android.animation.AnimatorListenerAdapter;
 import android.content.Context;
 import android.content.res.Configuration;
@@ -56,8 +54,8 @@ import java.util.List;
 public abstract class ExpandableView extends FrameLayout implements Dumpable, Roundable {
     private static final String TAG = "ExpandableView";
     /** whether the dump() for this class should include verbose details */
-    protected static final boolean DUMP_VERBOSE = Compile.IS_DEBUG
-            && (Log.isLoggable(TAG, Log.VERBOSE) || notificationColorUpdateLogger());
+    protected static final boolean DUMP_VERBOSE =
+            Compile.IS_DEBUG && Log.isLoggable(TAG, Log.VERBOSE);
 
     private RoundableState mRoundableState = null;
     protected OnHeightChangedListener mOnHeightChangedListener;
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/notification/row/NotificationBackgroundView.java b/packages/SystemUI/src/com/android/systemui/statusbar/notification/row/NotificationBackgroundView.java
index ed3a38d3305b..7ea9b14353d3 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/notification/row/NotificationBackgroundView.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/notification/row/NotificationBackgroundView.java
@@ -36,7 +36,6 @@ import com.android.internal.util.ContrastColorUtil;
 import com.android.settingslib.Utils;
 import com.android.systemui.Dumpable;
 import com.android.systemui.res.R;
-import com.android.systemui.util.DrawableDumpKt;
 
 import java.io.PrintWriter;
 import java.util.Arrays;
@@ -334,16 +333,6 @@ public class NotificationBackgroundView extends View implements Dumpable {
         pw.println("mActualHeight: " + mActualHeight);
         pw.println("mTintColor: " + hexColorString(mTintColor));
         pw.println("mRippleColor: " + hexColorString(mRippleColor));
-        pw.println("mBackground: " + DrawableDumpKt.dumpToString(mBackground));
-    }
-
-    /** create a concise dump of this view's colors */
-    public String toDumpString() {
-        return "<NotificationBackgroundView"
-                + " tintColor=" + hexColorString(mTintColor)
-                + " rippleColor=" + hexColorString(mRippleColor)
-                + " bgColor=" + DrawableDumpKt.getSolidColor(mBackground)
-                + ">";
-
+        pw.println("mBackground: " + mBackground);
     }
 }
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/notification/stack/NotificationStackScrollLayout.java b/packages/SystemUI/src/com/android/systemui/statusbar/notification/stack/NotificationStackScrollLayout.java
index 27db84f6715e..fb8bc7a34a9c 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/notification/stack/NotificationStackScrollLayout.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/notification/stack/NotificationStackScrollLayout.java
@@ -99,7 +99,6 @@ import com.android.systemui.shade.TouchLogger;
 import com.android.systemui.statusbar.EmptyShadeView;
 import com.android.systemui.statusbar.NotificationShelf;
 import com.android.systemui.statusbar.StatusBarState;
-import com.android.systemui.statusbar.notification.ColorUpdateLogger;
 import com.android.systemui.statusbar.notification.FakeShadowView;
 import com.android.systemui.statusbar.notification.LaunchAnimationParameters;
 import com.android.systemui.statusbar.notification.NotificationTransitionAnimatorController;
@@ -123,7 +122,6 @@ import com.android.systemui.statusbar.policy.HeadsUpUtil;
 import com.android.systemui.statusbar.policy.ScrollAdapter;
 import com.android.systemui.statusbar.policy.SplitShadeStateController;
 import com.android.systemui.util.Assert;
-import com.android.systemui.util.ColorUtilKt;
 import com.android.systemui.util.Compile;
 import com.android.systemui.util.DumpUtilsKt;
 
@@ -817,8 +815,8 @@ public class NotificationStackScrollLayout extends ViewGroup implements Dumpable
         updateBackgroundDimming();
         for (int i = 0; i < getChildCount(); i++) {
             View child = getChildAt(i);
-            if (child instanceof ActivatableNotificationView activatableView) {
-                activatableView.updateBackgroundColors();
+            if (child instanceof ActivatableNotificationView) {
+                ((ActivatableNotificationView) child).updateBackgroundColors();
             }
         }
     }
@@ -4632,13 +4630,6 @@ public class NotificationStackScrollLayout extends ViewGroup implements Dumpable
         final @ColorInt int onSurfaceVariant = Utils.getColorAttrDefaultColor(
                 mContext, com.android.internal.R.attr.materialColorOnSurfaceVariant);
 
-        ColorUpdateLogger colorUpdateLogger = ColorUpdateLogger.getInstance();
-        if (colorUpdateLogger != null) {
-            colorUpdateLogger.logEvent("NSSL.updateDecorViews()",
-                    "onSurface=" + ColorUtilKt.hexColorString(onSurface)
-                            + " onSurfaceVariant=" + ColorUtilKt.hexColorString(onSurfaceVariant));
-        }
-
         mSectionsManager.setHeaderForegroundColors(onSurface, onSurfaceVariant);
 
         if (mFooterView != null) {
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/notification/stack/NotificationStackScrollLayoutController.java b/packages/SystemUI/src/com/android/systemui/statusbar/notification/stack/NotificationStackScrollLayoutController.java
index 7c138776d5a5..6dd07e1915b5 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/notification/stack/NotificationStackScrollLayoutController.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/notification/stack/NotificationStackScrollLayoutController.java
@@ -96,7 +96,6 @@ import com.android.systemui.statusbar.NotificationShelf;
 import com.android.systemui.statusbar.RemoteInputController;
 import com.android.systemui.statusbar.StatusBarState;
 import com.android.systemui.statusbar.SysuiStatusBarStateController;
-import com.android.systemui.statusbar.notification.ColorUpdateLogger;
 import com.android.systemui.statusbar.notification.DynamicPrivacyController;
 import com.android.systemui.statusbar.notification.LaunchAnimationParameters;
 import com.android.systemui.statusbar.notification.NotificationActivityStarter;
@@ -178,7 +177,6 @@ public class NotificationStackScrollLayoutController implements Dumpable {
     private final ConfigurationController mConfigurationController;
     private final ZenModeController mZenModeController;
     private final MetricsLogger mMetricsLogger;
-    private final ColorUpdateLogger mColorUpdateLogger;
 
     private final DumpManager mDumpManager;
     private final FalsingCollector mFalsingCollector;
@@ -241,7 +239,6 @@ public class NotificationStackScrollLayoutController implements Dumpable {
             new View.OnAttachStateChangeListener() {
                 @Override
                 public void onViewAttachedToWindow(View v) {
-                    mColorUpdateLogger.logTriggerEvent("NSSLC.onViewAttachedToWindow()");
                     mConfigurationController.addCallback(mConfigurationListener);
                     if (!FooterViewRefactor.isEnabled()) {
                         mZenModeController.addCallback(mZenModeControllerCallback);
@@ -257,7 +254,6 @@ public class NotificationStackScrollLayoutController implements Dumpable {
 
                 @Override
                 public void onViewDetachedFromWindow(View v) {
-                    mColorUpdateLogger.logTriggerEvent("NSSLC.onViewDetachedFromWindow()");
                     mConfigurationController.removeCallback(mConfigurationListener);
                     if (!FooterViewRefactor.isEnabled()) {
                         mZenModeController.removeCallback(mZenModeControllerCallback);
@@ -336,16 +332,12 @@ public class NotificationStackScrollLayoutController implements Dumpable {
 
         @Override
         public void onUiModeChanged() {
-            mColorUpdateLogger.logTriggerEvent("NSSLC.onUiModeChanged()",
-                    "mode=" + mConfigurationController.getNightModeName());
             mView.updateBgColor();
             mView.updateDecorViews();
         }
 
         @Override
         public void onThemeChanged() {
-            mColorUpdateLogger.logTriggerEvent("NSSLC.onThemeChanged()",
-                    "mode=" + mConfigurationController.getNightModeName());
             mView.updateCornerRadius();
             mView.updateBgColor();
             mView.updateDecorViews();
@@ -727,7 +719,6 @@ public class NotificationStackScrollLayoutController implements Dumpable {
             ZenModeController zenModeController,
             NotificationLockscreenUserManager lockscreenUserManager,
             MetricsLogger metricsLogger,
-            ColorUpdateLogger colorUpdateLogger,
             DumpManager dumpManager,
             FalsingCollector falsingCollector,
             FalsingManager falsingManager,
@@ -782,7 +773,6 @@ public class NotificationStackScrollLayoutController implements Dumpable {
         mZenModeController = zenModeController;
         mLockscreenUserManager = lockscreenUserManager;
         mMetricsLogger = metricsLogger;
-        mColorUpdateLogger = colorUpdateLogger;
         mDumpManager = dumpManager;
         mLockscreenShadeTransitionController = lockscreenShadeTransitionController;
         mFalsingCollector = falsingCollector;
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/phone/ConfigurationControllerImpl.kt b/packages/SystemUI/src/com/android/systemui/statusbar/phone/ConfigurationControllerImpl.kt
index dea94162ad0e..6e8ad2e50620 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/phone/ConfigurationControllerImpl.kt
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/phone/ConfigurationControllerImpl.kt
@@ -159,15 +159,6 @@ class ConfigurationControllerImpl @Inject constructor(
     override fun isLayoutRtl(): Boolean {
         return layoutDirection == LAYOUT_DIRECTION_RTL
     }
-
-    override fun getNightModeName(): String {
-        return when (uiMode and Configuration.UI_MODE_NIGHT_MASK) {
-            Configuration.UI_MODE_NIGHT_YES -> "night"
-            Configuration.UI_MODE_NIGHT_NO -> "day"
-            Configuration.UI_MODE_NIGHT_UNDEFINED -> "undefined"
-            else -> "err"
-        }
-    }
 }
 
 // This could be done with a Collection.filter and Collection.forEach, but Collection.filter
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/policy/ConfigurationController.java b/packages/SystemUI/src/com/android/systemui/statusbar/policy/ConfigurationController.java
index cec77c12a40b..b2ef818d3282 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/policy/ConfigurationController.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/policy/ConfigurationController.java
@@ -33,9 +33,6 @@ public interface ConfigurationController extends CallbackController<Configuratio
     /** Query the current configuration's layout direction */
     boolean isLayoutRtl();
 
-    /** Logging only; Query the current configuration's night mode name */
-    String getNightModeName();
-
     interface ConfigurationListener {
         default void onConfigChanged(Configuration newConfig) {}
         default void onDensityOrFontScaleChanged() {}
diff --git a/packages/SystemUI/src/com/android/systemui/util/DrawableDump.kt b/packages/SystemUI/src/com/android/systemui/util/DrawableDump.kt
deleted file mode 100644
index 0c079a309962..000000000000
--- a/packages/SystemUI/src/com/android/systemui/util/DrawableDump.kt
+++ /dev/null
@@ -1,201 +0,0 @@
-/*
- * Copyright (C) 2023 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.android.systemui.util
-
-import android.content.res.ColorStateList
-import android.graphics.BlendMode
-import android.graphics.BlendModeColorFilter
-import android.graphics.ColorFilter
-import android.graphics.LightingColorFilter
-import android.graphics.PorterDuffColorFilter
-import android.graphics.drawable.Drawable
-import android.graphics.drawable.DrawableWrapper
-import android.graphics.drawable.GradientDrawable
-import android.graphics.drawable.LayerDrawable
-import android.graphics.drawable.RippleDrawable
-import android.util.Log
-
-fun dumpToString(drawable: Drawable?): String =
-    if (Compile.IS_DEBUG) StringBuilder().appendDrawable(drawable).toString()
-    else drawable.toString()
-
-fun getSolidColor(drawable: Drawable?): String =
-    if (Compile.IS_DEBUG) hexColorString(getSolidColors(drawable)?.defaultColor)
-    else if (drawable == null) "null" else "?"
-
-private fun getSolidColors(drawable: Drawable?): ColorStateList? {
-    return when (drawable) {
-        is GradientDrawable -> {
-            return drawable.getStateField<ColorStateList>("mSolidColors")
-        }
-        is LayerDrawable -> {
-            for (iLayer in 0 until drawable.numberOfLayers) {
-                getSolidColors(drawable.getDrawable(iLayer))?.let {
-                    return it
-                }
-            }
-            null
-        }
-        is DrawableWrapper -> {
-            return getSolidColors(drawable.drawable)
-        }
-        else -> null
-    }
-}
-
-private fun StringBuilder.appendDrawable(drawable: Drawable?): StringBuilder {
-    if (drawable == null) {
-        append("null")
-        return this
-    }
-    append("<")
-    append(drawable.javaClass.simpleName)
-
-    drawable.getStateField<ColorStateList>("mTint", fieldRequired = false)?.let {
-        append(" tint=")
-        appendColors(it)
-        append(" blendMode=")
-        append(drawable.getStateField<BlendMode>("mBlendMode"))
-    }
-    drawable.colorFilter
-        ?.takeUnless { drawable is DrawableWrapper }
-        ?.let {
-            append(" colorFilter=")
-            appendColorFilter(it)
-        }
-    when (drawable) {
-        is DrawableWrapper -> {
-            append(" wrapped=")
-            appendDrawable(drawable.drawable)
-        }
-        is LayerDrawable -> {
-            if (drawable is RippleDrawable) {
-                drawable.getStateField<ColorStateList>("mColor")?.let {
-                    append(" color=")
-                    appendColors(it)
-                }
-                drawable.effectColor?.let {
-                    append(" effectColor=")
-                    appendColors(it)
-                }
-            }
-            append(" layers=[")
-            for (iLayer in 0 until drawable.numberOfLayers) {
-                if (iLayer != 0) append(", ")
-                appendDrawable(drawable.getDrawable(iLayer))
-            }
-            append("]")
-        }
-        is GradientDrawable -> {
-            drawable
-                .getStateField<Int>("mShape")
-                ?.takeIf { it != 0 }
-                ?.let {
-                    append(" shape=")
-                    append(it)
-                }
-            drawable.getStateField<ColorStateList>("mSolidColors")?.let {
-                append(" solidColors=")
-                appendColors(it)
-            }
-            drawable.getStateField<ColorStateList>("mStrokeColors")?.let {
-                append(" strokeColors=")
-                appendColors(it)
-            }
-            drawable.colors?.let {
-                append(" gradientColors=[")
-                it.forEachIndexed { iColor, color ->
-                    if (iColor != 0) append(", ")
-                    append(hexColorString(color))
-                }
-                append("]")
-            }
-        }
-    }
-    append(">")
-    return this
-}
-
-private inline fun <reified T> Drawable.getStateField(
-    name: String,
-    fieldRequired: Boolean = true
-): T? {
-    val state = this.constantState ?: return null
-    val clazz = state.javaClass
-    return try {
-        val field = clazz.getDeclaredField(name)
-        field.isAccessible = true
-        field.get(state) as T?
-    } catch (ex: Exception) {
-        if (fieldRequired) {
-            Log.w(TAG, "Missing ${clazz.simpleName}.$name: ${T::class.simpleName}", ex)
-        } else if (Log.isLoggable(TAG, Log.VERBOSE)) {
-            Log.v(TAG, "Missing ${clazz.simpleName}.$name: ${T::class.simpleName} ($ex)")
-        }
-        null
-    }
-}
-
-private fun Appendable.appendColors(colorStateList: ColorStateList?) {
-    if (colorStateList == null) {
-        append("null")
-        return
-    }
-    val colors = colorStateList.colors
-    if (colors.size == 1) {
-        append(hexColorString(colors[0]))
-        return
-    }
-    append("<ColorStateList size=")
-    append(colors.size.toString())
-    append(" default=")
-    append(hexColorString(colorStateList.defaultColor))
-    append(">")
-}
-
-private fun Appendable.appendColorFilter(colorFilter: ColorFilter?) {
-    if (colorFilter == null) {
-        append("null")
-        return
-    }
-    append("<")
-    append(colorFilter.javaClass.simpleName)
-    when (colorFilter) {
-        is PorterDuffColorFilter -> {
-            append(" color=")
-            append(hexColorString(colorFilter.color))
-            append(" mode=")
-            append(colorFilter.mode.toString())
-        }
-        is BlendModeColorFilter -> {
-            append(" color=")
-            append(hexColorString(colorFilter.color))
-            append(" mode=")
-            append(colorFilter.mode.toString())
-        }
-        is LightingColorFilter -> {
-            append(" multiply=")
-            append(hexColorString(colorFilter.colorMultiply))
-            append(" add=")
-            append(hexColorString(colorFilter.colorAdd))
-        }
-        else -> append(" unhandled")
-    }
-    append(">")
-}
-
-private const val TAG = "DrawableDump"
diff --git a/packages/SystemUI/tests/src/com/android/systemui/statusbar/notification/collection/coordinator/ViewConfigCoordinatorTest.kt b/packages/SystemUI/tests/src/com/android/systemui/statusbar/notification/collection/coordinator/ViewConfigCoordinatorTest.kt
index b1d2ea21f7fc..0830191fe035 100644
--- a/packages/SystemUI/tests/src/com/android/systemui/statusbar/notification/collection/coordinator/ViewConfigCoordinatorTest.kt
+++ b/packages/SystemUI/tests/src/com/android/systemui/statusbar/notification/collection/coordinator/ViewConfigCoordinatorTest.kt
@@ -23,7 +23,6 @@ import com.android.keyguard.KeyguardUpdateMonitorCallback
 import com.android.systemui.SysuiTestCase
 import com.android.systemui.statusbar.NotificationLockscreenUserManager
 import com.android.systemui.statusbar.NotificationLockscreenUserManager.UserChangedListener
-import com.android.systemui.statusbar.notification.ColorUpdateLogger
 import com.android.systemui.statusbar.notification.collection.NotifPipeline
 import com.android.systemui.statusbar.notification.collection.NotificationEntry
 import com.android.systemui.statusbar.notification.row.ExpandableNotificationRow
@@ -58,7 +57,6 @@ class ViewConfigCoordinatorTest : SysuiTestCase() {
     private val lockscreenUserManager: NotificationLockscreenUserManager = mock()
     private val gutsManager: NotificationGutsManager = mock()
     private val keyguardUpdateMonitor: KeyguardUpdateMonitor = mock()
-    private val colorUpdateLogger: ColorUpdateLogger = mock()
 
     @Before
     fun setUp() {
@@ -68,9 +66,7 @@ class ViewConfigCoordinatorTest : SysuiTestCase() {
             configurationController,
             lockscreenUserManager,
             gutsManager,
-            keyguardUpdateMonitor,
-            colorUpdateLogger,
-        )
+            keyguardUpdateMonitor)
         coordinator.attach(pipeline)
         userChangedListener = withArgCaptor {
             verify(lockscreenUserManager).addUserChangedListener(capture())
diff --git a/packages/SystemUI/tests/src/com/android/systemui/statusbar/notification/row/ExpandableNotificationRowControllerTest.kt b/packages/SystemUI/tests/src/com/android/systemui/statusbar/notification/row/ExpandableNotificationRowControllerTest.kt
index 210b1a7f22f4..8ac2a334818c 100644
--- a/packages/SystemUI/tests/src/com/android/systemui/statusbar/notification/row/ExpandableNotificationRowControllerTest.kt
+++ b/packages/SystemUI/tests/src/com/android/systemui/statusbar/notification/row/ExpandableNotificationRowControllerTest.kt
@@ -34,7 +34,6 @@ import com.android.systemui.plugins.PluginManager
 import com.android.systemui.plugins.statusbar.StatusBarStateController
 import com.android.systemui.statusbar.SbnBuilder
 import com.android.systemui.statusbar.SmartReplyController
-import com.android.systemui.statusbar.notification.ColorUpdateLogger
 import com.android.systemui.statusbar.notification.collection.NotificationEntry
 import com.android.systemui.statusbar.notification.collection.NotificationEntryBuilder
 import com.android.systemui.statusbar.notification.collection.provider.NotificationDismissibilityProvider
@@ -83,7 +82,6 @@ class ExpandableNotificationRowControllerTest : SysuiTestCase() {
     private val rivSubComponentFactory: RemoteInputViewSubcomponent.Factory = mock()
     private val metricsLogger: MetricsLogger = mock()
     private val logBufferLogger = NotificationRowLogger(logcatLogBuffer(), logcatLogBuffer())
-    private val colorUpdateLogger: ColorUpdateLogger = mock()
     private val listContainer: NotificationListContainer = mock()
     private val childrenContainer: NotificationChildrenContainer = mock()
     private val smartReplyConstants: SmartReplyConstants = mock()
@@ -119,7 +117,6 @@ class ExpandableNotificationRowControllerTest : SysuiTestCase() {
                 activableNotificationViewController,
                 rivSubComponentFactory,
                 metricsLogger,
-                colorUpdateLogger,
                 logBufferLogger,
                 NotificationChildrenContainerLogger(logcatLogBuffer()),
                 listContainer,
diff --git a/packages/SystemUI/tests/src/com/android/systemui/statusbar/notification/row/NotificationTestHelper.java b/packages/SystemUI/tests/src/com/android/systemui/statusbar/notification/row/NotificationTestHelper.java
index 84139da38004..53b6dabf697b 100644
--- a/packages/SystemUI/tests/src/com/android/systemui/statusbar/notification/row/NotificationTestHelper.java
+++ b/packages/SystemUI/tests/src/com/android/systemui/statusbar/notification/row/NotificationTestHelper.java
@@ -65,7 +65,6 @@ import com.android.systemui.statusbar.NotificationMediaManager;
 import com.android.systemui.statusbar.NotificationRemoteInputManager;
 import com.android.systemui.statusbar.NotificationShadeWindowController;
 import com.android.systemui.statusbar.SmartReplyController;
-import com.android.systemui.statusbar.notification.ColorUpdateLogger;
 import com.android.systemui.statusbar.notification.ConversationNotificationProcessor;
 import com.android.systemui.statusbar.notification.SourceType;
 import com.android.systemui.statusbar.notification.collection.NotificationEntry;
@@ -606,7 +605,6 @@ public class NotificationTestHelper {
                 mDismissibilityProvider,
                 mock(MetricsLogger.class),
                 new NotificationChildrenContainerLogger(logcatLogBuffer()),
-                mock(ColorUpdateLogger.class),
                 mock(SmartReplyConstants.class),
                 mock(SmartReplyController.class),
                 mFeatureFlags,
diff --git a/packages/SystemUI/tests/src/com/android/systemui/statusbar/notification/stack/NotificationStackScrollLayoutControllerTest.java b/packages/SystemUI/tests/src/com/android/systemui/statusbar/notification/stack/NotificationStackScrollLayoutControllerTest.java
index a4f88fbe1469..0b37b284ef25 100644
--- a/packages/SystemUI/tests/src/com/android/systemui/statusbar/notification/stack/NotificationStackScrollLayoutControllerTest.java
+++ b/packages/SystemUI/tests/src/com/android/systemui/statusbar/notification/stack/NotificationStackScrollLayoutControllerTest.java
@@ -78,7 +78,6 @@ import com.android.systemui.statusbar.NotificationLockscreenUserManager.UserChan
 import com.android.systemui.statusbar.NotificationRemoteInputManager;
 import com.android.systemui.statusbar.RemoteInputController;
 import com.android.systemui.statusbar.SysuiStatusBarStateController;
-import com.android.systemui.statusbar.notification.ColorUpdateLogger;
 import com.android.systemui.statusbar.notification.DynamicPrivacyController;
 import com.android.systemui.statusbar.notification.collection.NotifCollection;
 import com.android.systemui.statusbar.notification.collection.NotifPipeline;
@@ -149,7 +148,6 @@ public class NotificationStackScrollLayoutControllerTest extends SysuiTestCase {
     @Mock private PrimaryBouncerInteractor mPrimaryBouncerInteractor;
     @Mock private NotificationLockscreenUserManager mNotificationLockscreenUserManager;
     @Mock private MetricsLogger mMetricsLogger;
-    @Mock private ColorUpdateLogger mColorUpdateLogger;
     @Mock private DumpManager mDumpManager;
     @Mock(answer = Answers.RETURNS_SELF)
     private NotificationSwipeHelper.Builder mNotificationSwipeHelperBuilder;
@@ -1009,7 +1007,6 @@ public class NotificationStackScrollLayoutControllerTest extends SysuiTestCase {
                 mZenModeController,
                 mNotificationLockscreenUserManager,
                 mMetricsLogger,
-                mColorUpdateLogger,
                 mDumpManager,
                 new FalsingCollectorFake(),
                 new FalsingManagerFake(),
diff --git a/packages/SystemUI/tests/utils/src/com/android/systemui/statusbar/policy/FakeConfigurationController.kt b/packages/SystemUI/tests/utils/src/com/android/systemui/statusbar/policy/FakeConfigurationController.kt
index 46a10532ea52..c51de334c8ca 100644
--- a/packages/SystemUI/tests/utils/src/com/android/systemui/statusbar/policy/FakeConfigurationController.kt
+++ b/packages/SystemUI/tests/utils/src/com/android/systemui/statusbar/policy/FakeConfigurationController.kt
@@ -43,7 +43,6 @@ class FakeConfigurationController @Inject constructor() : ConfigurationControlle
     }
 
     override fun isLayoutRtl(): Boolean = isRtl
-    override fun getNightModeName(): String = "undefined"
 }
 
 @Module
diff --git a/packages/SystemUI/tests/utils/src/com/android/systemui/utils/leaks/FakeConfigurationController.java b/packages/SystemUI/tests/utils/src/com/android/systemui/utils/leaks/FakeConfigurationController.java
index 111c40d49efc..516eb6e6dffd 100644
--- a/packages/SystemUI/tests/utils/src/com/android/systemui/utils/leaks/FakeConfigurationController.java
+++ b/packages/SystemUI/tests/utils/src/com/android/systemui/utils/leaks/FakeConfigurationController.java
@@ -38,9 +38,4 @@ public class FakeConfigurationController
     public boolean isLayoutRtl() {
         return false;
     }
-
-    @Override
-    public String getNightModeName() {
-        return "undefined";
-    }
 }
-- 
2.34.1

