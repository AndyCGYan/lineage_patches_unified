From ecec3ca008ad5d8c62e673ef7412ca9fc228ceeb Mon Sep 17 00:00:00 2001
From: Pierre-Hugues Husson <phh@phh.me>
Date: Tue, 2 Apr 2024 16:53:08 -0400
Subject: [PATCH 26/26] Flattened apexes no longer exist, we'll deal with it
 another way

---
 init/property_service.cpp | 22 +---------------------
 1 file changed, 1 insertion(+), 21 deletions(-)

diff --git a/init/property_service.cpp b/init/property_service.cpp
index 649823d92..14713c043 100644
--- a/init/property_service.cpp
+++ b/init/property_service.cpp
@@ -707,26 +707,6 @@ uint32_t InitPropertySet(const std::string& name, const std::string& value) {
 static Result<void> load_properties_from_file(const char*, const char*,
                                               std::map<std::string, std::string>*);
 
-static bool kernel_supports_capex() {
-    //Put a threshold at >= 5.0
-    struct utsname buf;
-    uname(&buf);
-    const char *where = buf.release;
-    int a = atoi(where);
-    if(a >= 5) return true;
-
-    // If there are vendor apexes, we most likely actually need them
-    auto dir = std::unique_ptr<DIR, decltype(&closedir)>{opendir("/vendor/apex"), closedir};
-    if (!dir) {
-        return false;
-    }
-    for (struct dirent* ent = readdir(dir.get()); ent; ent = readdir(dir.get())) {
-        if(strstr(ent->d_name, "apex")) return true;
-    }
-
-    return false;
-}
-
 /*
  * Filter is used to decide which properties to load: NULL loads all keys,
  * "ro.foo.*" is a prefix match, and "ro.foo.bar" is an exact match.
@@ -822,7 +802,7 @@ static void LoadProperties(char* data, const char* filter, const char* filename,
                 const char *new_value = value;
 
                 if(strcmp("ro.apex.updatable", key) == 0) {
-                    new_value = kernel_supports_capex() ? "true" : "false";
+                    new_value = "true";
                 }
                 if (it == properties->end()) {
                     (*properties)[key] = new_value;
-- 
2.34.1

