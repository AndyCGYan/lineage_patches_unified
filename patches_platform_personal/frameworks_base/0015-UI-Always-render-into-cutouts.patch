From e2c6da83998abfe3bde32543732df0f7124cc400 Mon Sep 17 00:00:00 2001
From: Andy CrossGate Yan <GeForce8800Ultra@gmail.com>
Date: Wed, 7 Oct 2020 14:00:35 +0000
Subject: [PATCH 15/22] UI: Always render into cutouts

Eliminates black/white letterboxing in apps, keyguard and QS

Change-Id: I4661c7979bfa7de453329fcddbaeefc2009e2da3
---
 core/java/android/view/InsetsState.java       | 19 +------------------
 .../shade/QuickSettingsController.java        | 11 +++++++----
 .../com/android/server/wm/DisplayPolicy.java  |  1 +
 3 files changed, 9 insertions(+), 22 deletions(-)

diff --git a/core/java/android/view/InsetsState.java b/core/java/android/view/InsetsState.java
index 21eec67bfe10..092e14bf8590 100644
--- a/core/java/android/view/InsetsState.java
+++ b/core/java/android/view/InsetsState.java
@@ -480,24 +480,7 @@ public class InsetsState implements Parcelable {
     }
 
     public void getDisplayCutoutSafe(Rect outBounds) {
-        outBounds.set(
-                WindowLayout.MIN_X, WindowLayout.MIN_Y, WindowLayout.MAX_X, WindowLayout.MAX_Y);
-        final DisplayCutout cutout = mDisplayCutout.get();
-        final Rect displayFrame = mDisplayFrame;
-        if (!cutout.isEmpty()) {
-            if (cutout.getSafeInsetLeft() > 0) {
-                outBounds.left = displayFrame.left + cutout.getSafeInsetLeft();
-            }
-            if (cutout.getSafeInsetTop() > 0) {
-                outBounds.top = displayFrame.top + cutout.getSafeInsetTop();
-            }
-            if (cutout.getSafeInsetRight() > 0) {
-                outBounds.right = displayFrame.right - cutout.getSafeInsetRight();
-            }
-            if (cutout.getSafeInsetBottom() > 0) {
-                outBounds.bottom = displayFrame.bottom - cutout.getSafeInsetBottom();
-            }
-        }
+        outBounds.set(mDisplayFrame);
     }
 
     public void setRoundedCorners(RoundedCorners roundedCorners) {
diff --git a/packages/SystemUI/src/com/android/systemui/shade/QuickSettingsController.java b/packages/SystemUI/src/com/android/systemui/shade/QuickSettingsController.java
index aa4818409265..a0314e0cdbfb 100644
--- a/packages/SystemUI/src/com/android/systemui/shade/QuickSettingsController.java
+++ b/packages/SystemUI/src/com/android/systemui/shade/QuickSettingsController.java
@@ -289,6 +289,8 @@ public class QuickSettingsController implements Dumpable {
     private int mOneFingerQuickSettingsIntercept;
     private final ContentObserver mOneFingerQuickSettingsInterceptObserver;
 
+    private WindowManager mWindowManager;
+
     private final Region mInterceptRegion = new Region();
     /** The end bounds of a clipping animation. */
     private final Rect mClippingAnimationEndBounds = new Rect();
@@ -408,6 +410,8 @@ public class QuickSettingsController implements Dumpable {
             }
         };
 
+        mWindowManager = mPanelView.getContext().getSystemService(WindowManager.class);
+
         dumpManager.registerDumpable(this);
     }
 
@@ -554,8 +558,7 @@ public class QuickSettingsController implements Dumpable {
      *  on ACTION_DOWN, and safely queried repeatedly thereafter during ACTION_MOVE events.
      */
     public void updateGestureInsetsCache() {
-        WindowManager wm = this.mPanelView.getContext().getSystemService(WindowManager.class);
-        WindowMetrics windowMetrics = wm.getCurrentWindowMetrics();
+        WindowMetrics windowMetrics = mWindowManager.getCurrentWindowMetrics();
         mCachedGestureInsets = windowMetrics.getWindowInsets().getInsets(
                 WindowInsets.Type.systemGestures());
         mCachedWindowWidth = windowMetrics.getBounds().width();
@@ -1537,8 +1540,8 @@ public class QuickSettingsController implements Dumpable {
 
     private int calculateRightClippingBound() {
         if (mIsFullWidth) {
-            return mPanelView.getRight()
-                    + mDisplayRightInset;
+            // right bounds should also always reach the edge of the screen - getCurrentWindowMetrics ignores insets
+            return mWindowManager.getCurrentWindowMetrics().getBounds().right;
         } else {
             return mNotificationStackScrollLayoutController.getRight()
                     + mDisplayLeftInset;
diff --git a/services/core/java/com/android/server/wm/DisplayPolicy.java b/services/core/java/com/android/server/wm/DisplayPolicy.java
index b6e614b55041..4b9a120ac038 100644
--- a/services/core/java/com/android/server/wm/DisplayPolicy.java
+++ b/services/core/java/com/android/server/wm/DisplayPolicy.java
@@ -1426,6 +1426,7 @@ public class DisplayPolicy {
         displayFrames = win.getDisplayFrames(displayFrames);
 
         final WindowManager.LayoutParams attrs = win.mAttrs.forRotation(displayFrames.mRotation);
+        attrs.layoutInDisplayCutoutMode = LAYOUT_IN_DISPLAY_CUTOUT_MODE_ALWAYS;
         sTmpClientFrames.attachedFrame = attached != null ? attached.getFrame() : null;
 
         // If this window has different LayoutParams for rotations, we cannot trust its requested
-- 
2.34.1

